/***************************************************************************//**
  @defgroup timer Таймер
  Модуль представляет собой набор функций для реализации таймера на основе
  системных часов процессора или ОС.

  Реализация функций для инициализации системного счетчика и получения его значения
  реализуются для каждой платформы своим портом. Так же порт определяет колчичество
  системного счетчика за секунду с помощью константы #CLOCK_CONF_SECOND и тип
  @c t_clock для представления текущего значения системного счетчика.
  Эти функции могут использоваться как напрямую, так и через общее API для работы
  с таймером из timer.h, который может использоваться для отсчета интервалов
  времени, например для таймаутов.
  Все функции принимают значения в отсчетай системного клока, поэтому необходимо
  использовать константу #CLOCK_CONF_SECOND для перевода этих значений
  во временные интервалы.

  Для работы с модулем в проекте нужно добавить в проект пути к файлу timer.h и
  к порту используемой плотформы, а также путь к файлу lcspec.h, в котором
  описаны специфические для компилятора макросы (в данном случае используется
  LINLINE для определения inline-функций) в стандартные пути для включения
  заголовочных файлов, а так же добавить файл clock.c из нужного порта.

  При работе с системным клоком контроллера перед вызовом функций данного модуля
  необходимо вызвать функцию clock_init() (или clock_init_val(), если нужно задать
  начальное значение системного счетчика). При работе с системными часами ОС
  обычно эта функция не требуется, так как таймер ОС уже проинициализирован
  самой ОС (однако ее вызов можно оставить, так как каждый порт реализует хотя бы
  "пустую" версию этой функции).

  Для работы с системным счетчиком напрямую используется функция clock_time(),
  возвращающая значение системного счетчика.

  Для работы с API таймера, необходимо объявить переменную типа #t_timer, которая
  будет хранить состояние таймра. Работать с полями структуры напрямую не рекомендуется.
  Вместо этого следует использовать функции из timer.h, которые принимают эту
  переменную в качестве первого аргумента.

  При стандартной работе, сперва таймер устанавливается для отсчета заданного
  интервала с помощью timer_set(). Проверить, истек ли заданный интервал,
  можно с помощью timer_expired(). Количество отсчетов симтемного таймера
  до истичения интервала можно получить с помощью timer_expiration().
  Перезапустить таймер на установленный в предыдущем timer_set() интервал можно
  с помошью timer_reset() или timer_restart() (относительно времени последнего
  истечения таймера или текущего времени соответственно).

  Например, если какие-то действия нужно выполнять в течении заданного интервала,
  это можно сделать следующим образом:

  @code
  #define TIMEOUT_MS   200

  void main(void)
  {
    t_timer tmr;
    //инициализируем системный счетчик
    clock_init();
    // устанавливаем таймер на заданное кол-во мс
    timer_set(&tmr, TIMEOUT_MS*CLOCK_CONF_SECOND/1000);
    while (!timer_expired(&tmr))
    {
        //выполняем требуемые действия


    }

    //интервал завершился
  }
  @endcode


  В качестве основной идеи была взята реализация таймера для стека uIP от
  Adam Dunkels <adam@sics.se>
  *****************************************************************************/

/***************************************************************************//**
  @addtogroup timer
  @{
  @file timer.h
  Файл содержит описание функций для работы с таймером. Все функции реализованы
  как inline-функции, так что файл содержит и реализацию функций
  @date 27.08.2010
  @author Borisov Alexey <borisov@lcard.ru>
  *****************************************************************************/
#ifndef __TIMER_H__
#define __TIMER_H__

#include "clock.h"
#include "lcspec.h"

/** Стркутура для описания состояния таймера */
typedef struct timer {
  t_clock start; /**< Значение системного таймера, с которого ведется отсчет */
  t_clock interval; /**< Интервал времени, после которого таймер считается истекшим */
} t_timer;


/***************************************************************************//**
  @brief Установить временной интервал относительно заданного времени

  Функция устанавливает таймер на заданный интервал, аналогично timer_set(),
  но относительно заданного времени (значения системного счетчика), а не
  относительно текущего.
  С помощью функции timer_expired() можно в дальнейшем проверить, истек ли
  заданный интервал.
  @param[in] t           Указатель на состояние таймера
  @param[in] interval    Интервал, через который таймер истечет в системных клоках.
  @param[in] start_time  Значение системного счетчика, относительно которого
                         устанавливается временной интервал
 ******************************************************************************/
static LINLINE void timer_set_at(t_timer *t, t_clock interval, t_clock start_time)
{
    t->interval = interval;
    t->start = start_time;
}

/***************************************************************************//**
  @brief Установить временной интервал

  Функция устанавливает таймер на заданный интервал относительно текущего времени.
  С помощью функции timer_expired() можно в дальнейшем проверить, истек ли
  заданный интервал.
  @param[in] t        Указатель на состояние таймера
  @param[in] interval Интервал, через который таймер истечет в системных клоках.
 ******************************************************************************/
static LINLINE void timer_set(t_timer *t, t_clock interval)
{
    timer_set_at(t, interval, clock_time());
}

/***************************************************************************//**
  @brief Сброс таймера.

  Данная функции перезапускает таймер на интервал, заданный в последнем timer_set()
  относительно времени последнего истечения таймера (а не текущего времени, как
  timer_restart()). По сути функция продлевает время истечения таймера на тот
  же интервал, что был задан. Интервалы между срабатыванием таймеров
  сохраняется во времени, в отличие от использования timer_rester().
  @param[in] t        Указатель на состояние таймера
  @sa timer_restart()
  *****************************************************************************/
static LINLINE void timer_reset(t_timer *t)
{
    t->start += t->interval;
}

/***************************************************************************//**
  @brief Перезапуск таймера.

  Данная функции перезапускает таймер на интервал, заданный в последнем timer_set(),
  относительно текущего времени.
  @note  Время срабатывания периодического таймер будет "плыть" при использовании
  данной функции (из-за случайной разницы между текущим временем и временем
  завершения предыдущего интервала). Для периодического таймера можно использовать
  timer_reset()
  @param[in] t        Указатель на состояние таймера
  @sa timer_reset()
  *****************************************************************************/
static LINLINE void timer_restart(t_timer *t)
{
    t->start = clock_time();
}

/***************************************************************************//**
  @brief Проверка, истечет ли заданный интервал в определенное время

  Функция проверяет, истечет ли установленный с помощью timer_set() интервал
  в моент времени, определяемый заданным значением системного счетчика.
    @param[in] t        Указатель на состояние таймера
    @param[in] exp_time Значение системного счетчика, для которого проверяется,
                        истечет ли таймер в данный момент
    @return             Не ноль, если интервал истечет, иначе - ноль
 ******************************************************************************/
static LINLINE int timer_expired_at(const t_timer *t, t_clock exp_time)
{
    return (t_clock)(exp_time - t->start) >= (t_clock)t->interval;
}

/***************************************************************************//**
  @brief Проверка, истек ли заданный интервал

  Функция проверяет, истек ли заданный с помощью timer_set() интервал.
    @param[in] t        Указатель на состояние таймера
    @return             Не ноль, если интервал истек, иначе - ноль
 ******************************************************************************/
static LINLINE int timer_expired(const t_timer *t)
{
    return timer_expired_at(t, clock_time());
}

/***************************************************************************//**
  @brief Получить время до истечения интервала от заданного момента

  Функция возвращает значение интервала времени (в системных клоках) от заданного
  момента до времени истечения установленного с помощью timer_set() интервала.
    @param[in] t        Указатель на состояние таймера
    @param[in] cur_time Значение системного счетчика, от которого считается время
                        до момента истечения интервала
    @return             Время (в клоках системного счетчика) до истечения интервала
*******************************************************************************/
static LINLINE t_clock timer_expiration_from(const t_timer* t, t_clock cur_time)
{
    t_clock expired = (cur_time-t->start);
    return (expired > t->interval) ? 0 : t->interval - expired;
}

/***************************************************************************//**
  @brief Получить время до истечения интервала

  Функция возвращает значение интервала времени (в системных клоках) от текущего
  момента до времени истечения установленного с помощью timer_set() интервала.
    @param[in] t        Указатель на состояние таймера
    @return             Время (в клоках системного счетчика) до истечения интервала
*******************************************************************************/
static LINLINE t_clock timer_expiration(const t_timer* t)
{
    return timer_expiration_from(t, clock_time());
}

#endif /* __TIMER_H__ */

/** @} */

